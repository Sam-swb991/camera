#include "tempwriter.h"
#include "common.h"
#include <sys/stat.h>
#include <unistd.h>
#define DATETIME_SIZE  32
tempwriter::tempwriter(int mode)
{
    this->mode = mode;
    if(mode == common)
    {
        struct stat stat_buf;
        stat(sd_path.c_str(),&stat_buf);
        cout<<"file size(K):"<<stat_buf.st_size/1024<<endl;
        if(stat_buf.st_size>=1024*1024)
        {
            string date = common::GetDate();
            string new_name = "/mnt/sd_card/temp-"+date+".txt";
            rename(sd_path.c_str(),new_name.c_str());
        }
        file.open(sd_path,ios::app);
        is_open = file.is_open();
    }
    else if(mode == alarm)
    {
        struct stat stat_buf;
        stat(alarm_path.c_str(),&stat_buf);
        cout<<"file size(K):"<<stat_buf.st_size/1024<<endl;
        if(stat_buf.st_size>=1024*1024)
        {
            string date = common::getsystimebyzone();
            string new_name = "/mnt/sd_card/alarm-"+date+".txt";
            rename(alarm_path.c_str(),new_name.c_str());
        }
        file.open(alarm_path,ios::app);
        is_open = file.is_open();
    }
}

void tempwriter::write(TEMP_C temp_c,string rectname,int ptat,int alarmmode)
{
    if(is_open)
    {
        string time = common::getsystimebyzone();
        float PTAT =ptat/10-273.15f;
        file<<time<<" "<<rectname<<" "<<temp_c.highTemp<<" "<<temp_c.lowTemp<<" "<<PTAT;
        if(mode == alarm)
        {
            if((alarmmode&0x01)==0x01)
            {
                file<<" 预警报警";
            }
            if((alarmmode&0x02)==0x02)
            {
                file<<" 高温报警";
            }
            if((alarmmode&0x04)==0x04)
            {
                file<<" 联动报警";
            }
            if((alarmmode&0x08)==0x08)
            {
                file<<" 快速升温报警";
            }

        }
        file<<endl;
        file.close();
    }
    else
        cout<<"tempwriter open failed!"<<endl;
}

void tempwriter::close()
{
    file.close();
}
